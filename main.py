# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–ª–∞—Å—Å—ã.
# @literator_by_coding_lover_bot --> –Ω–∏–∫ –≤ —Ç–≥
import logging
from telegram.ext import Application, CommandHandler, ConversationHandler, MessageHandler, filters

# –ó–∞–ø—É—Å–∫–∞–µ–º –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.DEBUG
)

logger = logging.getLogger(__name__)
BOT_TOKEN = '7677856238:AAEN_kpqzFmjFCmEF30TQ9Lke-Ts4HJLtZs'

A = ['–ï—â—ë –≤ –ø–æ–ª—è—Ö –±–µ–ª–µ–µ—Ç —Å–Ω–µ–≥,',
     '–ê –≤–æ–¥—ã —É–∂ –≤–µ—Å–Ω–æ–π —à—É–º—è—Ç',
     '–ë–µ–≥—É—Ç –∏ –±—É–¥—è—Ç —Å–æ–Ω–Ω—ã–π –±—Ä–µ–≥,',
     '–ë–µ–≥—É—Ç, –∏ –±–ª–µ—â—É—Ç, –∏ –≥–ª–∞—Å—è—Ç‚Ä¶',
     '–û–Ω–∏ –≥–ª–∞—Å—è—Ç –≤–æ –≤—Å–µ –∫–æ–Ω—Ü—ã:',
     '¬´–í–µ—Å–Ω–∞ –∏–¥—ë—Ç, –≤–µ—Å–Ω–∞ –∏–¥—ë—Ç!¬ª'
     ]


async def start(update, context):
    context.user_data['index'] = 0
    await update.message.reply_text(f'''üëã –ü—Ä–∏–≤–µ—Ç! –î–∞–≤–∞–π –ø—Ä–æ—á–∏—Ç–∞–µ–º –≤–º–µ—Å—Ç–µ –∫—Ä–∞—Å–∏–≤–æ–µ —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏–µ üå∑
–ü–æ—Å—Ç–∞—Ä–∞–π—Å—è –ø–æ–≤—Ç–æ—Ä—è—Ç—å –∫–∞–∂–¥—É—é —Å—Ç—Ä–æ—á–∫—É —Ç–æ—á–Ω–æ ‚Äî —Å –±–æ–ª—å—à–æ–π –±—É–∫–≤—ã –∏ –∑–Ω–∞–∫–∞–º–∏ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è.

–ù–∞—á–∏–Ω–∞–µ–º! üé¨
‚úçÔ∏è{A[context.user_data['index']]}''')
    context.user_data['index'] += 1
    return 1


async def get_next_string(update, context):
    text = update.message.text
    if text == A[context.user_data['index']]:
        if context.user_data['index'] < len(A) - 1:
            context.user_data['index'] += 1
            await update.message.reply_text(f'''‚úÖ –û—Ç–ª–∏—á–Ω–æ! –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º:
‚úçÔ∏è{A[context.user_data['index']]}''')
            context.user_data['index'] += 1
            if context.user_data['index'] > len(A) - 1:
                await update.message.reply_text('''üéâ –ë—Ä–∞–≤–æ! –¢—ã –ø—Ä–æ—á–∏—Ç–∞–ª –≤—Å—ë —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏–µ –¥–æ –∫–æ–Ω—Ü–∞!
–•–æ—á–µ—à—å –ø—Ä–æ–π—Ç–∏ –µ–≥–æ –µ—â—ë —Ä–∞–∑? –ù–∞–ø–∏—à–∏ üëâ /start
–ò–ª–∏ –æ—Ç–¥–æ—Ö–Ω–∏ ‚Äî –ø—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏ üëâ /stop''')
                return 1
        else:
            await update.message.reply_text('''üéâ –ë—Ä–∞–≤–æ! –¢—ã –ø—Ä–æ—á–∏—Ç–∞–ª –≤—Å—ë —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏–µ –¥–æ –∫–æ–Ω—Ü–∞!
–•–æ—á–µ—à—å –ø—Ä–æ–π—Ç–∏ –µ–≥–æ –µ—â—ë —Ä–∞–∑? –ù–∞–ø–∏—à–∏ üëâ /start
–ò–ª–∏ –æ—Ç–¥–æ—Ö–Ω–∏ ‚Äî –ø—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏ üëâ /stop''')
            return 1
    else:
        await update.message.reply_text(f'''‚ùå –û–π, –Ω–µ—Ç, –Ω–µ —Ç–∞–∫‚Ä¶
–ù–∞–±–µ—Ä–∏ –∫–æ–º–∞–Ω–¥—É /suphler, –µ—Å–ª–∏ –Ω—É–∂–Ω–∞ –ø–æ–¥—Å–∫–∞–∑–∫–∞ üëÄ''')


async def stop(update, context):
    await update.message.reply_text('''üëã –î–æ –≤—Å—Ç—Ä–µ—á–∏! –í–æ–∑–≤—Ä–∞—â–∞–π—Å—è, –∫–æ–≥–¥–∞ –∑–∞—Ö–æ—á–µ—à—å —Å–Ω–æ–≤–∞ –ø–æ—á–∏—Ç–∞—Ç—å —Å—Ç–∏—Ö–∏ üìö‚ú® 
–ï—Å–ª–∏ –∑–∞—Ö–æ—á–µ—à—å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å ‚Äî –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ /start.''')
    return ConversationHandler.END


async def suphler(update, context):
    await update.message.reply_text(f'''üìù –ü–æ–¥—Å–∫–∞–∑–∫–∞:
‚úçÔ∏è{A[context.user_data['index']]}''')


def main():
    # –°–æ–∑–¥–∞—ë–º –æ–±—ä–µ–∫—Ç Application.
    # –í–º–µ—Å—Ç–æ —Å–ª–æ–≤–∞ "TOKEN" –Ω–∞–¥–æ —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –æ—Ç @BotFather —Ç–æ–∫–µ–Ω
    application = Application.builder().token(BOT_TOKEN).build()

    conv_handler = ConversationHandler(
        # –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ –¥–∏–∞–ª–æ–≥.
        # –í –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ ‚Äî –∫–æ–º–∞–Ω–¥–∞ /start. –û–Ω–∞ –∑–∞–¥–∞—ë—Ç –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å.
        entry_points=[CommandHandler('start', start)],

        # –°–æ—Å—Ç–æ—è–Ω–∏–µ –≤–Ω—É—Ç—Ä–∏ –¥–∏–∞–ª–æ–≥–∞.
        # –í–∞—Ä–∏–∞–Ω—Ç —Å –¥–≤—É–º—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏, —Ñ–∏–ª—å—Ç—Ä—É—é—â–∏–º–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.
        states={
            1: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_next_string),
                CommandHandler('suphler', suphler),
                CommandHandler('stop', stop)]
        },

        # –¢–æ—á–∫–∞ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞. –í –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ ‚Äî –∫–æ–º–∞–Ω–¥–∞ /stop.
        fallbacks=[CommandHandler('stop', stop)]
    )

    application.add_handler(conv_handler)

    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.
    application.run_polling()


# –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é main() –≤ —Å–ª—É—á–∞–µ –∑–∞–ø—É—Å–∫–∞ —Å–∫—Ä–∏–ø—Ç–∞.
if __name__ == '__main__':
    main()
